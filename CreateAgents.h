//
//  CreateAgents.h
//  
//
//  Created by L. Dombrowski on 1/21/20

//
#ifndef CREATEAGENTS_H
#define CREATEAGENTS_H

#include <vector>
#include <random>
#include <string>

#include "Facility.h"
#include "FacilitiesList.h"
#include "Test.h"
#include "District.h"
#include "Region.h"

using namespace std;
// using namespace GAGENTS;

// generate a random number using mt19937 marisenne twister algorithm
// find next number in sequence - will get slower the longer it runs
int getRandomNo( int index, uniform_int_distribution<int> r1, std::mt19937 generator);

// generate a random number from a list generated by mt19937 marisenne twister algorithm
int getNextRandomNo100();

// generate a random number from a list generated by mt19937 marisenne twister algorithm
int getNextRandomNoPop(string disease);

// generate a random exponential number from a list
//int getNextRandomExpNo();

// generate a random geometric number from a list
int getNextRandomGeoNo();

// find the tier associated with facility type - each country may have it's own mapping
int findTier(string type);

// dump all the facility attributes
void dumpFacilityAttributes(FacilitiesList* list);

// dump all the facility attributes
void dumpFacilityAttributes1(FacilitiesList* list, string file);

// fill in Facility pointers for up and closest connections
void addClosestPointer(vector<Facility*> facilities);

// fill in Facility pointers for up and closest connections
void addClosestPointer(FacilitiesList* facilities);

// Fill in lateral connections on this tier
void fillLatteralConnections(vector<Facility*> facilities);

// Fill in lateral connections on this tier
void fillLatteralConnections(FacilitiesList* facilities);

// if testing exists on this tier, loop through and find the closest lateral connection 
// compare it to the up connection and update closest connection if closer
void findClosestLateral(vector<Facility*> facilities);

// if testing exists on this tier, loop through and find the closest lateral connection 
// compare it to the up connection and update closest connection if closer
void findClosestLateral(FacilitiesList* facilities);

// check to see if facilites on another tier are closer and can be used
void checkTier(int tierNo, vector<Facility*> facilities);

// update Diagnosis agents with the new updated closest testing Facility in each Facility
void updateDiagnosisTesting(FacilitiesList* facilities);

// check to see if facilites on another tier are closer and can be used
void checkTier(int tierNo, FacilitiesList* facilities);

// make sure closest facility distance is correct
void updateClosestDistance(FacilitiesList* facilities);

// create facilities from input file and store in FacilitiesList
void createFacilitesFromInput(FacilitiesList* facilities, vector<vector<string>> facInput, vector<vector<string>> popData, vector<vector<string>> regionDistrictInput, vector<vector<string>> facSpecific, vector<string> diseaseList, vector<Disease*> dis, vector<Test*> tes, string regionDistrictArray[], int runNo);

// create district and region objects from FacilitiesList
void updateRegionAndDistrictsFromFacilities(FacilitiesList* facilities, vector<District*> districts, vector<Region*> regions);

// update up, down and latteral connections for FacilitiesList
void updateFacilityConnections(FacilitiesList* facilities);

// create district objects from input file
vector<Disease*> createDiseaseObjects(vector<vector<string>> d, vector<vector<string>> runSpecific);
//vector<Disease*> createDiseaseObjects(vector<vector<string>> d, vector<vector<string>> TBUntreatMort);

// create region objects from input file
vector<Region*> createRegionObjects(string regionDistrictArray[]);

// create district objects from input file
vector<District*> createDistrictObjects(string regionDistrictArray[]);

// get population values for regions and districts and update the disease stat variables
void updateStatsPopulation(vector<Region*> reg, vector<District*> dist, Stats* stats, int yearNo);

// get incidence values for regions and districts and update the disease stat variables
void updateStatsIncidence(vector<Region*> reg, vector<District*> dist, Stats* stats, string disease, int yearNo);

// get incidence values for regions and districts and update the disease stat variables
void updateStatsXpert(vector<Region*> reg, vector<District*> dist, Stats* stats, FacilitiesList* list);

// change Xpert locations to match current facilitySpecific settings
void changeXpert(FacilitiesList* list, vector<vector<string>> facilitySpecific);

// create facilities from input file
vector<Test*> createTestObjects(vector<vector<string>> t);

// create population bins from facility longitude and latitude and population cluster points
vector<vector<string>> createPopBins(vector<vector<string>> facInput, vector<vector<string>> populationData, vector<vector<string>> travelTime, int distanceTime);

// create new patient for facility
Patient* createPatient(FacilitiesList* list, string fac, vector<Disease*> dis, string diseaseName, vector<Test*> tests, int createTimeStep);

// create new patients for each facility each timestep - here because have to calculate total no. of patients for all facilities
void createPatients(vector<Facility*> fac, FacilitiesList* list, std::vector<string> diseaseList, vector<Disease*> dis, vector<Test*> tests, int timeStep);

// see change run specific test and disease paramenters
void changeFiles(vector<vector<string>> runSpecific, vector<Disease*> dis, vector<Test*> tes);

// find whether there is testing associated with a tier - each country may have it's own mapping
bool findTestingAvailable(int tier, string disease);

// find whether there is testing associated with a tier - each country may have it's own mapping
void  findTestingAvailable(int tier, vector <testingAvailableAttr*> testing);

//create testing available structure vector associated with a tier - each country may have it's own mapping
vector <testingAvailableAttr*>  createTestingAvailableByTier(int tier);

// find out how many patients will be created by transmission for disease and where they will be located
int checkTransPatients(Facility* fac, string disease, int popBinsIndex, float transThreshold, int noTimesteps);

// create transmission patients at this facility or close to this facility - patients are assumed to be infected
void createTransPatients(int noPatients, FacilitiesList* list, string facility, vector<Disease*> diseaseList, string disease, vector<Test*> tests, int popBinsIndex, int noTimesteps);

// create a new patient from old patient
void copyPatient(Patient* patient, FacilitiesList* list, int timestep, bool ageFlag, bool genderFlag, Stats* stat, Stats* facilityStat);

#endif // CREATEAGENTS_H


